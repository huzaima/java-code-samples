/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment.pkg1.project;
import java.util.Random;
/**
 *
 * @author my
 */
public class RBSTNode<T> {
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    private RBSTNode<T> left, right;
    private int key, priority;
    private T data;
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    RBSTNode()
    {
        left = right = null;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    RBSTNode(T d, int k)
    {
        data = d;
        key = k;
        
        Random r = new Random();
        
        int x = Math.abs(r.nextInt(key*100));   //bound for the priority, will be unique for evry node
        while(x<=0)                             //to make sure bound is not negative or zero
            x = Math.abs(r.nextInt(key*100));   
        
        priority = Math.abs(r.nextInt(x));      //random number generated with bound calculated above
        /* 
         * random number generated with bound (mod) as key*100 to make the
         * priority as unique as possible
         */
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public void setKey(int k)           //setting key
    {
        key = k;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public void setData(T v)           //setting value
    {
        data = v;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public void setRight(RBSTNode n)        //setting next node (node after current node)
    {
        right = n;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public void setLeft(RBSTNode p)    //setting previous node (node before current node)
    {
        left = p;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public int getPriority()
    {                                   //accessing priority, no setPriority()
        return priority;                //method since priority is set in 
    }                                   //constructor and cannot be changed
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public int getKey()                 //getting key
    {
        return key;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public T getData()                 //getting value
    {
        return data;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public RBSTNode getRight()              //getting next node
    {
        return right;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
    public RBSTNode getLeft()          //getting previous node
    {
        return left;
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
